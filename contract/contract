pragma solidity ^0.8.0;

contract FileStorage {
    // Mapping to store file uploads by the owner (address -> array of file hashes)
    mapping(address => string[]) public fileUploads;
    // Mapping to store file ownership (file hash -> owner address)
    mapping(string => address) public fileOwners;
    // Mapping to store access control for each file (file hash -> user address -> has access)
    mapping(string => mapping(address => bool)) public fileAccess;
    // Mapping to store file expiry (file hash -> expiry timestamp)
    mapping(string => uint256) public fileExpiry;

    event NewFileUploaded(address indexed uploader, string fileHash, uint256 expiry);
    event AccessGranted(address indexed owner, address indexed user, string fileHash);
    event AccessRevoked(address indexed owner, address indexed user, string fileHash);

    // Modifier to ensure that the caller is the file owner
    modifier onlyOwner(string memory _fileHash) {
        require(fileOwners[_fileHash] == msg.sender, "Not the file owner");
        _;
    }

    // Modifier to check if the caller has access to the file
    modifier hasFileAccess(string memory _fileHash) {
        require(fileAccess[_fileHash][msg.sender] || fileOwners[_fileHash] == msg.sender, "Access denied");
        require(block.timestamp < fileExpiry[_fileHash], "File access expired");
        _;
    }

    // Function to upload a file with expiration time
    function uploadFile(string memory _fileHash, uint256 _expiry) public {
        require(_expiry > block.timestamp, "Expiration time must be in the future");
        
        fileUploads[msg.sender].push(_fileHash);
        fileOwners[_fileHash] = msg.sender;  // Set the sender as the owner of the file
        fileExpiry[_fileHash] = _expiry;     // Set the expiration time of the file
        
        emit NewFileUploaded(msg.sender, _fileHash, _expiry);
    }

    // Function to grant access to a file to a new user
    function grantAccess(string memory _fileHash, address _newOwner) public onlyOwner(_fileHash) {
        fileAccess[_fileHash][_newOwner] = true;
        emit AccessGranted(msg.sender, _newOwner, _fileHash);
    }

    // Function to revoke access from a user
    function revokeAccess(string memory _fileHash, address _user) public onlyOwner(_fileHash) {
        fileAccess[_fileHash][_user] = false;
        emit AccessRevoked(msg.sender, _user, _fileHash);
    }

    // Fallback function for unexpected calls or Ether transfers
    fallback() external payable {
        revert("Fallback function triggered");
    }

    // Helper function to check if the caller has access to a file
    function hasAccess(address _user, string memory _fileHash) public view returns (bool) {
        return (fileAccess[_fileHash][_user] || fileOwners[_fileHash] == _user) && block.timestamp < fileExpiry[_fileHash];
    }
}
